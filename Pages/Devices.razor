@page "/devices"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<AuthorizeView>
    <Authorized>

        <h3>Devices</h3>

        @if (devices == null)
        {
            <p><em>No devices...</em></p>
        }
        else
        {
            <div class="card-body d-flex justify-content-end">
                <button class="btn btn-outline-secondary mt-2"><i class="fas fa-plus me-2"></i> CREATE DEVICE</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Device</th>
                        <th>Status</th>
                        <th>Data</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in devices)
                    {
                        <tr>
                            <td>

                                <div><strong>@item.DeviceType</strong></div>
                                <div class="text-muted"><small>@item.DeviceId</small></div>
                            </td>
                            <td>
                                <div><strong>@item.ConnectionState</strong></div>
                                <div class="text-muted"><small>@item.Status</small></div>
                            </td>
                            <td>
                                <div><strong>@item.JsonData</strong></div>
                                <div class="text-muted"><small>@item.JsonDataLastUpdated</small></div>
                            </td>

                            <div class="d-flex justify-content-end">
                                <button id="btn-send-@item.DeviceId" @onclick="()=>ToggleDeviceSendStateAsync(item.DeviceId,item.AllowSending)" class="btn btn-outline-secondary btn-send-command">
                                    @if (item.AllowSending)
                                    {
                                        <span>STOP</span>
                                    }
                                    else
                                    {
                                        <span>START</span>
                                    }
                                </button>
                                <button id="btn-statistics-@item.DeviceId" class="btn"><i class="fas fa-chart-area"></i></button>
                                <button id="btn-delete-@item.DeviceId" class="btn"><i class="fas fa-trash"></i></button>
                            </div>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IOTDevice[] devices;

    [Parameter]
    public IOTDevice Item { get; set; }


    protected async Task GetDevicesAsync()
    {
        devices = await Http.GetFromJsonAsync<IOTDevice[]>("http://localhost:7071/api/devices");
        //  devices = await Http.GetFromJsonAsync<IOTDevice[]>("https://mydeviceapi.azurewebsites.net/api/GetDevices?code=aEmcNUmNVupNCvHscXyBiE1yudzadzdOyi9KroveN4pjNOkd0cEiPg==");

    }




    protected override void OnInitialized()
    {
        var timer = new Timer(new TimerCallback(_ => InvokeAsync(() => StateHasChanged())), null, 1000, 1000);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await GetDevicesAsync();
    }



    private async Task ToggleDeviceSendStateAsync(string id, bool sending)
    {
        //Vill anrop api/azurefunction starta och stoppa
        RequestModel bodyRequest = new RequestModel() { DeviceId = id };
       

        if (sending)
            bodyRequest.MethodName = "stop";
        else bodyRequest.MethodName = "start";


        var response = await Http.PostAsJsonAsync("http://localhost:7071/api/directmethod", bodyRequest);

    }



}
